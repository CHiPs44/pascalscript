(* 
    Pascal EBNF, written from http://downloads.freepascal.org/fpc/docs-pdf/ref.pdf
    EBNF syntax from ???
    Other attempt: https://github.com/rochus-keller/FreePascal/blob/master/syntax/FreePascal.ebnf

    This file is part of the PascalScript Pascal interpreter.
    SPDX-FileCopyrightText: 2024 Christophe 'CHiPs' Petit <chips44@gmail.com>
    SPDX-License-Identifier: LGPL-3.0-or-later
*)

(******************************************************************************)
(* LEXER RULES                                                                *)
(******************************************************************************)

letter      =   'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' 
            |   'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'
            |   'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' 
            |   'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'
            ;
bin_digit   =   '0' | '1' ;
oct_digit   =   bin_digit | '2'  '3' | '4' |'5' | '6' | '7' ;
dec_digit   =   oct_digit | '8' | '9' ;
hex_digit   =   dec_digit | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' ;

bin_digit_sequence  =   hex_digit , [ hex_digit ]* ;
oct_digit_sequence  =   oct_digit , [ oct_digit ]* ;
dec_digit_sequence  =   dec_digit , [ dec_digit ]* ;
hex_digit_sequence  =   hex_digit , [ hex_digit ]* ;
unsigned_integer    =   dec_digit_sequence 
                    |   '%' , bin_digit_sequence 
                    |   '&' , oct_digit_sequence 
                    |   '$' , hex_digit_sequence 
                    ;
unsigned_real       =   dec_digit_sequence , [ '.' dec_digit_sequence ] [ scale_factor ] ;
scale_factor        =   'E' | 'e' , [ sign ] , dec_digit_sequence ;
sign                =   '+' | '-' ;
unsigned_number     =   unsigned_real | unsigned_integer ;
signed_number       =   sign , unsigned_number ;

character_string    =   quoted_string | control_string ;
quoted_string       =   "'" , [ string_character ]* , "'" ;
string_character    =   "''" | ? Any character except ', CR and LF ? ;
control_string      =   '#' , unsigned_integer ;

identifier          =   letter | '_' , [ letter | dec_digit | '_' ]* ;

(******************************************************************************)
(* PARSER RULES                                                               *)
(******************************************************************************)

label                   =   'LABEL' , dec_digit_sequence | identifier
                        ;

constant_declaration    =   identifier = constant_expression
                        ;   (* omitted: typed_constant_declaration =   .. *)
constant_expression     =   constant | constant_identifier | ordinal_constant | real_constant | string_constant
                        ;
constant                =   ordinal_constant | real_constant | string_constant | character_string | 'NIL'
                        ;
ordinal_constant        =   [ sign ] unsigned_integer
                        |   char_constant
                        ;
char_constant           =   control_string
                        |   "'" , ( string_character ) , "'"
                        ;
real_constant           =   [ sign ] unsigned_real;

type_declaration        =   identifier '=' type ;
type                    =   simple_type
                        |   string_type 
                        |   structured_type
                        |   pointer_type
                        |   procedural_type
                        ;
simple_type             =   ordinal_type | real_type | boolean_type ;
real_type               =   real_type_identifier ;
real_type_identifier    =   'REAL'
                        ;   (* | 'SINGLE' | 'DOUBLE' | 'EXTENDED' | 'COMP' | 'CURRENCY' ; *)
ordinal_type            =   'INTEGER' | 'UNSIGNED' | 'CHAR'
                        ;   (* | 'SHORTINT' | 'SMALLINT' | 'LONGINT' | 'LONGWORD' | 'INT64' | 'BYTE' | 'WORD' | 'QWORD' 
                               | 'BYTEBOOL' | 'WORDBOOL' | 'LONGBOOL' | 'QWORDBOOL' ; *)
boolean_type            =   'BOOLEAN' | 'BOOLEAN16' | 'BOOLEAN32' | 'BOOLEAN64' ;
string_type             =   'STRING' [ '[' unsigned_integer | constant_identifier ']' ] ;
enumerated_type         =   '(' identifier_list ')'
                        ;
structured_type         =   array_type | record_type | set_type | file_type | pointer_type
                        ;   (* class_type | object_type | interface_type | variant_type *)
array_type              =   'ARRAY' , '[' [ index_list ] ']' , 'OF' , type
                        ;
set_type                =   'SET' , 'OF' , type
                        ;
file_type               =   'FILE' , [ 'OF' , type ]
                        |   'TEXT'
                        ;
pointer_type            =   '^' , type
                        ;
index_list              =   subrange_type { ',' subrange_type }*
                        ;
subrange_type           =   constant '..' constant
                        ;
identifier_list     =   identifier , [ ',' , identifier ]* 
                        ;

(* omitted: assigned_enum_list, hint_directives, ansi strings, ... *)

additive_operator       =   '+' | '-' ;
multiplicative_operator =   '*' | '/' | 'DIV' | 'MOD' | 'AND' | 'SHL' | 'SHR' ;
relational_operator     =   '=' | '<>' | '<' | '>' | '<=' | '>=' | 'IN' | 'IS' ;

expression              =   or_expression ;
or_expression           =   and_expression { ( 'OR' | 'XOR' ) and_expression } ;
and_expression          =   relational_expression { 'AND' relational_expression } ;
relational_expression   =   simple_expression [ relational_operator simple_expression ] ;
simple_expression       =   term { additive_operator term } ;
term                    =   factor { multiplicative_operator factor } ;
factor                  =   '(' expression ')'
                        |   variable_reference
                        |   function_call
                        |   unsigned_constant
                        |   'NOT' factor
                        |   sign factor
                        |   set_constructor
                        |   value_typecast
                        |   address_factor
                        ;

variable_reference      =   identifier ;

function_call           =   function_identifier , [ actual_parameter_list ] ;
function_identifier     =   identifier ;
actual_parameter_list   =   '(' [ expression [ ',' expression ]* ] ')'

unsigned_constant       =   unsigned_number
                        |   character_string
                        |   constant_identifier
                        |   'NIL'
                        ;

(* omitted: LABEL, ASM *)
statement               =   [ label ':' ] simple_statement | structured_statement
                        ;
(* omitted: RAISE *)
simple_statement        =   assignment_statement
                        |   procedure_statement
                        |   'GOTO' label
                        ;
(* omitted: += -= *= /= *)
assignment_statement    =   ( variable_reference | function_identifier | 'RESULT' ) ':=' expression ;
(* omitted: method identifier, qualified method identifier *)
procedure_statement     =   ( procedure_identifier | variable_reference ) [ actual_parameter_list ] ;
procedure_identifier    =   identifier ;

(* omitted: WITH, EXCEPTION *)
structured_statement    =   compound_statement
                        |   conditional_statement
                        |   repetitive_statement
                        ;
compound_statement      =   'BEGIN' [ statement_list ] [ ';' ] 'END'
statement_list          =   statement [ ';' statement ]* ;

conditional_statement   =   if_statement
                        |   case_statement
                        ;
if_statement            =   'IF' expression 'THEN' statement [ 'ELSE' statement ] ;
case_statement          =   'CASE' expression 'OF'
                        |       constant [ '..' constant ] [ ',' constant [ '..' constant ] ] ':' statement
                                [ ( 'ELSE' | 'OTHERWISE' ) statement_list [ ';' ] ]
                            'END'
                        ;

repetitive_statement    =   repeat_statement
                        |   while_statement
                        |   for_statement
                        ;
repeat_statement        =   'REPEAT' statement_list [ ';' ] 'UNTIL' expression
                        ;
while_statement         =   'WHILE' expression 'DO' statement
                        ;
for_statement           =   'FOR' control_variable ':=' expression ( 'TO' | 'DOWNTO' ) expression 'DO' statement
                        ;
(* NB: BREAK and CONTINUE do not appear in grammar and are not reservved keywords but are usable *)

program                 =   'PROGRAM' program_header [ '(' identifier_list ')' ] ';'
                            [ uses_clause ]
                            block
                            '.'
                        ;
unit                    =   'UNIT' identifier ';'
                            interface_part
                            implementation_part
                            '.'
                        ;
interface_part          =   'INTERFACE'
                            [ uses_clause ]
                            declaration_part
                        ;
implementation_part     =   'IMPLEMENTATION' ';'
                            [ uses_clause ]
                            [ implementation_declaration ]*
                            ;


uses_clause             =   'USES' identifier [ 'IN' quoted_string ] [ ',' identifier [ 'IN' quoted_string ]  ]* ';' ;
block                   =   declaration_part
                            compound_statement
                        ;
(* omitted: RESOURCESTRING, THREADVAR *)
declaration_part        =   [
                                'LABEL' label [ ',' label ]* ';'
                                'CONST' constant_declaration ';' [ constant_declaration ';' ]*
                                'TYPE'  type_declaration ';' [ type_declaration ';' ]*
                                'VAR'   variable_declaration ';' [ variable_declaration ';' ]*
                                [ procedure_declaration | function_declaration ]*
                            ]*
                        ;
(*
    Examples:
        Procedure Example1;
        Procedure Example2();
        Procedure Example3(A, B: Integer);
        Procedure Example4(A: Integer, B: Char, Var C: String);
        ...
*)
procedure_declaration   =   'PROCEDURE' identifier [ '(' [ formal_parameter_list ] ')' ] ';'
                            [ declaration_part ]
                            [ compound_statement ';' ]
                        ;
(*
    Function Example1: Integer;
    Function Example2(): Integer;
    Function Example3(A, B: Integer): Integer;
    Function Example4(Var A: Integer): Integer;
    ...
*)
function_declaration    =   'FUNCTION' identifier [ '(' [ formal_parameter_list ] ')' ] ':' type ';'
                            [ declaration_part ]
                            [ compound_statement ';']
                        ;
formal_parameter_list   =   formal_parameter [ ',' formal_parameter ]* ;
formal_parameter        =   [ 'VAR' | 'OUT' ] identifier_list ':' type
                        ;

(* omitted: class, interface, ... *)

(* TO BE CONTINUED... *)
