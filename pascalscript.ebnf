(* ******************** PascalScript EBNF/ANTLR4 ******************** *)

(* ******************** NUMBERS ******************** *)
binary_digit
    : '0'
    | '1'
    ;
octal_digit
    : binary_digit | '2' | '3' | '4' |'5' | '6' | '7'
    ;
decimal_digit
    : octal_digit | '8' | '9'
    ;
hex_digit
    : decimal_digit | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F'
    ;
binary_digit_sequence
    : binary_digit [ binary_digit ]*
    ;
octal_digit_sequence
    : octal_digit [ octal_digit ]*
    ;
decimal_digit_sequence
    : decimal_digit [ decimal_digit ]*
    ;
hex_digit_sequence
    : hex_digit [ hex_digit ]*
    ;
unsigned_integer
    : decimal_digit_sequence 
    | '%' binary_digit_sequence 
    | '&' octal_digit_sequence 
    | '$' hex_digit_sequence
    ;
sign
    : '+' 
    | '-'
    ;
signed_integer
    : [ sign ] unsigned_integer
    ;
scale_factor
    : 'E' | 'e' [ sign ] decimal_digit_sequence
    ;
unsigned_real
    : decimal_digit_sequence [ '.' decimal_digit_sequence ] [ scale_factor ]
    ;
signed_real
    : [ sign ] unsigned_real
    ;

(* ******************** IDENTIFIERS ******************** *)
uppercase_letter
    : 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M'
    | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'
    ;
lowercase_letter
    : 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm'
    | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'
    ;
letter
    : lowercase_letter 
    | uppercase_letter 
    ;
identifier
    : letter | '_' [ letter | decimal_digit | '_' ]* ;
identifier_list
    : identifier [ ',' identifier ]*
    ;

(* ******************** CHARS & STRINGS ******************** *)
char_value
    : "''" 
    | ? Any character except ', CR or LF ?
    ;
control_char
    : '#' unsigned_integer
    ;
quoted_char
    : "'" char_value "'"
    ;
character_value
    : quoted_char
    | control_char
    ;
character_string
    : quoted_string | control_char [ quoted_string | control_char ]*
    ;
quoted_string
    : "'" [ char_value ]* "'"
    ;

(* ******************** BOOLEANS ******************** *)
boolean_value
    : 'FALSE'
    | 'TRUE'
    ;

(* ******************** LABEL & GOTO ******************** *)
label
    : decimal_digit_sequence 
    | identifier
    ;
label_list
    : label [ ',' label ]*
    ;
label_declaration
    : 'LABEL' label_list ';'
    ;
goto_block
    : 'GOTO' label ';'
    ;

(* ******************** CONSTANTS ******************** *)
constant_identifier
    : identifier
    ;
constant_value
    : unsigned_integer
    | signed_integer
    | unsigned_real 
    | signed_real
    | quoted_char
    | quoted_string
    ;
constant_declaration
    : constant_identifier '=' constant_value ';' ;
const_block
    : 'CONST' constant_declaration ';' [ constant_declaration ';' ]*
    ;

(* ******************** TYPES ******************** *)
ordinal_type
    : 'INTEGER'
    | 'CARDINAL'
    | 'BOOLEAN'
    | 'CHAR'
    ;
enum_type
    : '(' identifier [ ',' identifier ]* ')'
    ;
subrange_limit
    : [ sign ] unsigned_integer
    : [ sign ] constant_identifier
    ;
subrange_type
    : subrange_limit '..' subrange_limit
    ;
scalar_type
    : ordinal_type
    | enum_type
    | subrange_type
    ;
real_type
    : 'REAL'
    ;
array_limit
    : scalar_type
    | type_identifier
    ;
array_limits
    : array_limit [ ',' array_limit ]*
    ;
array_type
    : 'ARRAY' '[' array_limits ']' 'OF' type_definition
    ;
string_size
    : unsigned_integer | constant_identifier
    ;
string_type
    : 'STRING' [ '[' string_size ']' ]
    ;
record_type
    : 'RECORD' [ identifier_list, ':' type_definition ';' ]+ 'END'
    ;
type_definition
    : scalar_type
    | real_type
    | array_type
    | string_type
    | record_type
    ;
type_identifier
    : identifier
    ;
type_declaration
    : type_identifier '=' type_definition
    ;
type_block
    : 'TYPE' type_declaration ';' [ type_declaration ';' ]*
    ;

(* ******************** VARIABLES ******************** *)
variable_declaration
    : identifier [ ',' identifier ]* ':' type_reference
    ;
var_block
    : 'VAR' variable_declaration ';' [ variable_declaration ';' ]*
    ;

(* ******************** PROCEDURES & FUNCTIONS ******************** *)
parameter_declaration
    : identifier_list ':' type_reference
    ;
parameter_declaration_list
    : [ parameter_declaration [ ',' parameter_declaration ]* ]$
    ;
procedure_or_function_body
    : [ const_block ]
      [ type_block ]
      [ var_block ]
      [ procedure_function_block ]
      instruction_block
      ;
procedure_declaration
    : 'PROCEDURE' identifier [ '(' parameter_declaration_list ')' ] ';'
      procedure_or_function_body ';'
    ;
function_declaration
    : 'FUNCTION' identifier [ '(' parameter_declaration_list ')' ] ':' type_reference ';'
      procedure_or_function_body ';'
    ;
procedure_function_block
    : [ procedure_declaration | function_declaration ]*
    ;

(* ******************** PROGRAM ******************** *)
pascal_program
    : 'PROGRAM' identifier ';' 
      [ const_block ] 
      [ type_block ] ,
      [ var_block ] 
      instruction_block '.'
    ;
instruction_block
    : 'BEGIN' [ instruction ';' ]* 'END'
    ;
instruction
    : assignment
    | if_block
    | repeat_block
    | while_block
    | for_block
    | procedure_call
    ;
assignment
    : variable_reference ':=' expression ';'
    ;
if_block
    : 'IF' expression 
      'THEN' instruction | instruction_block ';'
    [ 'ELSE' instruction | instruction_block ';' ] ;
repeat_block
    : 'REPEAT' [ instruction ';' ]* 
      'UNTIL' expression ';'
    ;
while_block
    : 'WHILE' expression 'DO' 
        instruction | instruction_block ';'
    ;
for_block
    : 'FOR' variable_reference ':=' expression 'TO' | 'DOWNTO' expression
        instruction | instruction_block, ';'
    ;
procedure_call
    : identifier | 'WRITE' | 'WRITELN' 
        [ '(' parameters_list ')' ] ';'
    ;
parameters_list
    : parameter [ ',' parameter ]*
    ;
parameter
    : expression
    ;

(* ******************** EXPRESSIONS ******************** *)
unary_operator
    : '+' | '-' | 'NOT'
    ;
addition_operator
    : '+' | '-' | 'OR' | 'XOR'
    ;
multiplication_operator
    : '*' | '/' | 'DIV' | 'MOD' | 'AND' | 'SHL' | 'SHR'
    ;
relational_operator
    : '=' | '<>' | '<' | '<=' | '>' | '>=' ;
variable_reference
    : identifier
    | identifier '[' expression [  ',' expression ]* ']'
    ;
constant_reference
    : identifier
    ;
expression
    : unary_operator expression
    | term [ addition_operator term ]
    | '(' expression ')'
    ;
term
    : factor { multiplication_operator factor }
    ;
factor
    : expression 
    | unsigned_integer
    | unsigned_real
    | character_value
    | boolean_value
    | character_string
    | variable_reference 
    | constant_identifier
    | sign expression
    | function_call
    ;

```
